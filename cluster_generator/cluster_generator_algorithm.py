# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ClustersGenerator
                                 A QGIS plugin
 Genera Clusters aplicando modelos de aprendizaje no supervisados
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-10-10
        copyright            : (C) 2020 by Rober D
        email                : laquedasconelemail@123.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Rober D'
__date__ = '2020-10-10'
__copyright__ = '(C) 2020 by Rober D'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.utils import iface
from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                        QgsProject,
                        QgsPointXY,
                       QgsFeature,
                       QgsFeatureSink,
                       QgsField,
                       QgsFields,
                       QgsGeometry,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterString,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterCrs,
                       QgsProcessingParameterFeatureSink,
                       QgsCoordinateReferenceSystem,
                       QgsCoordinateTransform,
                       QgsVectorLayer,
                       QgsWkbTypes)

import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score


class ClustersGeneratorAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.

        
        #Campos del formulario.
        self.addParameter(
            QgsProcessingParameterFile( # Le decimos que vamos a cargar un fichero csv
                self.INPUT,
                self.tr('Fichero csv de entrada'),
                extension="csv"
            )
        )

        self.addParameter(
            QgsProcessingParameterString(
                "CSV_SEPARATOR",
                self.tr('Separador de celdas'),
                defaultValue=";",
            )
        )

        self.addParameter(
            QgsProcessingParameterCrs(
                "CRS_INPUT",
                self.tr('Sistema de referencia de coordenadas origen'),
                defaultValue= "EPSG:4326",
                optional = False,
            )
        )

        self.addParameter(
            QgsProcessingParameterString(
                "LAT_COLUMN",
                self.tr('Nombre de columna Latitud'), #Geo Point
                optional = False,
            )
        )

        self.addParameter(
            QgsProcessingParameterString(
                "LONG_COLUMN",
                self.tr('Nombre de columna Longitud'), #Geo Point
                optional = False,
            )
        )

        self.addParameter(
            QgsProcessingParameterString(
                "COORDS_SEPARATOR",
                self.tr('Si la latitud y longitud están en el mismo campo, indicar separador: '),
                defaultValue=",",
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                "N_CLUSTERS",
                self.tr('Indicar el número de clusters, si no buscará automáticamente el número de clusters óptimo'),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=0,
                optional = False
            )
        )

        self.addParameter(
            QgsProcessingParameterNumber(
                "N_CLUSTERS_MAX",
                self.tr('Número máximo de clusters'),
                type=QgsProcessingParameterNumber.Integer,
                defaultValue=15,
                optional = False
            )
        )

        # Parámetro que nos permite seleccionar donde almacenar los resultados, 
        # podríamos haber utilizdo también addOutput si no quisieramos este comportamiento,
        # pero no podríamos usar QgsProcessingParameterFeatureSink
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Centroides')
            )
        )

    #Extrae las coordenadas del dataframe pasado y las devuelve en un nuevo dataframe con los campos Latitud, Longitud 
    def extract_coords(self, data, lat_col, long_col, sep):
        df_coords = pd.DataFrame(columns=["Latitud", "Longitud"])
        if lat_col != long_col:
            for reg in data:
                #Deberíamos comprobar si el los datos tienen un formato adecuado.
                if isinstance(lat_col, (int, float)) and isinstance(long_col, (int, float)):
                    df_coords = df_coords.append({"Latitud": data[lat_col], "Longitud": data[long_col]}, ignore_index=True)
                else:
                    print("No se ha podido extraer las coordenadas")
                    exit()
        else:
            try:
                for reg in data[lat_col]:
                    coords = reg.split(sep, 1)
                    coords[0] = float(coords[0])
                    coords[1] = float(coords[1])
                    if isinstance(coords[0], (int, float)) and isinstance(coords[1], (int, float)):
                        df_coords = df_coords.append({"Latitud": coords[0], "Longitud": coords[1]}, ignore_index=True)
            except:
                print("No se ha podido extraer las coordenadas")
                exit()
        print(df_coords.head())
        return df_coords

    
    #devuelve el número óptimo de clusters de acuerdo al coeficiente Silhouette
    def get_optimized_n_clusters(self, data, max_clusters=100, n_init=10):
        best_result = {}
        best_score = 0

        for k in range(2, max_clusters):
            kmean = KMeans(n_clusters = k, n_init = n_init).fit(data)
            score = silhouette_score(data, kmean.labels_)
            if score > best_score:
                best_score = score
                best_result= {'n_clusters':k, 'score': score}
        return best_result


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        #source = self.parameterAsSource(parameters, self.INPUT, context)
        feedback.setProgress(0)

        fields = QgsFields()
        fields.append(QgsField('idcluster', QVariant.Int))  #Único atributo de la tabla resultante
        
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, fields, QgsWkbTypes.Point, parameters["CRS_INPUT"])
        

        #Leemos el fichero csv. 
        df = pd.read_csv(parameters['INPUT'], sep = parameters["CSV_SEPARATOR"])

        feedback.setProgress(10)

        #Comprobamos que las columnas indicadas de Latitud y longitud existen en el dataframe
        columns = list(df.columns)

        if parameters['LAT_COLUMN'] not in columns:
            print("No existe la columna", parameters['LAT_COLUMN'], "en el fichero")
            feedback.cancel()
            return
        elif parameters['LONG_COLUMN'] not in columns:
            print("No existe la columna", parameters['LONG_COLUMN'], "en el fichero")
            feedback.cancel()
            return

        #Extraemos las coordenadas Latitud y Longitud
        df_coords = self.extract_coords(df, parameters['LAT_COLUMN'], parameters['LONG_COLUMN'], parameters['COORDS_SEPARATOR'])
        print(df_coords)

        feedback.setProgress(20)

        #Calculamos el número óptimo de clusters si no hemos específicado niguno. Podríamos optimizar este proceso
        if parameters['N_CLUSTERS'] < 2:
            print("Número de clusteres", parameters['N_CLUSTERS'])
            best_n_clusters = self.get_optimized_n_clusters(df_coords, max_clusters=parameters["N_CLUSTERS_MAX"])
        else:
            best_n_clusters = {"n_clusters" : parameters['N_CLUSTERS']}

        #Un largo tiempo después.
        print(best_n_clusters["n_clusters"])

        feedback.setProgress(60)
        

        #Ya podemos calcular los centroides de los clusters.
        kmeans = KMeans(n_clusters=best_n_clusters["n_clusters"], random_state=1).fit(df_coords)

        feedback.setProgress(70)

        #coordenadas de los centroides en el sistema de coordenadas entrante.
        print(kmeans.cluster_centers_)


        project = QgsProject.instance()
        #crs_output = QgsCoordinateReferenceSystem(4326)
        crs_output = project.crs()

        #Capa Vector que contendrá la geometría. 0 indica que es del tipo integer
        #vector_layer = QgsVectorLayer("Point?crs=EPSG:4326&field=cluster_id:0", "Centroides", "memory")

        feedback.setProgress(90)

        #Tratamos cada centroide para convertirlos a puntos XY. Todavía seguirán sin ser geometrías como tal

        cluster_id = 0
        for center in kmeans.cluster_centers_:

            cluster_id += 1
            point = QgsPointXY(center[1], center[0])

            #Si el sistema de coordenadas origen no es el mismo que 4326, lo proyectamos.
            if parameters["CRS_INPUT"].authid() != 'EPSG:4326':
                xform = QgsCoordinateTransform(parameters["CRS_INPUT"],
                                                crs_output,
                                                project)
                point = xform.transform(point)
            
            #Creamos el registro o feature
            feature = QgsFeature()
            feature.setGeometry(QgsGeometry.fromPointXY(point))
            feature.setAttributes([cluster_id])

            #Se lo añadimos a la capa
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

            
        feedback.setProgress(100)

        #También podríamos determinar a qué cluster pertenece cada elemento del csv.


        # Se pueden devolver muchas más cosas a la vez, pero siempre incluídas dentro del diccionario
        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'MLClusterGenerator'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Algorithms for vector Layer'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ClustersGeneratorAlgorithm()
